---
interface Episode {
  id: string;
  number: number;
  title: string;
  thumbnail: string;
  youtubeId: string;
  youtubeUrl: string;
  appleUrl: string;
  spotifyUrl: string;
  guests: Array<{ name: string; social: string | null }>;
  isRoundup: boolean;
  publishDate?: string;
  displayDate?: string;
}

interface Props {
  episodes: Episode[];
}

const { episodes } = Astro.props;
---

<dialog id="episode-lightbox" class="p-0 rounded-lg shadow-2xl max-w-3xl w-full mx-auto">
  <div class="bg-white rounded-lg overflow-hidden">
    <!-- Header -->
    <div class="flex justify-between items-start p-4 border-b">
      <div>
        <h2 id="lightbox-title" class="text-xl font-bold text-gray-900"></h2>
        <p id="lightbox-episode-number" class="text-gray-600 text-sm mt-1"></p>
      </div>
      <button id="close-lightbox" class="text-gray-500 hover:text-gray-700 p-1" aria-label="Close">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Video Embed -->
    <div class="aspect-video bg-gray-900" id="video-container">
      <!-- YouTube iframe will be injected here -->
    </div>

    <!-- Episode Info -->
    <div class="p-4">
      <!-- Guests Section (hidden for roundups) -->
      <div id="guests-section" class="mb-4 hidden">
        <h3 class="text-base font-semibold mb-2 text-gray-900">Guests</h3>
        <div id="guests-list" class="space-y-2">
          <!-- Guest links will be injected here -->
        </div>
      </div>

      <!-- Platform Links -->
      <div class="mb-4">
        <h3 class="text-base font-semibold mb-2 text-gray-900">Listen On</h3>
        <div class="flex flex-wrap gap-2">
          <a id="youtube-link" href="#" target="_blank" rel="noopener noreferrer"
             class="inline-flex items-center gap-1 px-3 py-1.5 text-sm bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
              <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
            </svg>
            YouTube
          </a>

          <a id="apple-link" href="#" target="_blank" rel="noopener noreferrer"
             class="inline-flex items-center gap-1 px-3 py-1.5 text-sm bg-gray-800 text-white rounded hover:bg-gray-900 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
              <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
            </svg>
            Apple Podcasts
          </a>

          <a id="spotify-link" href="#" target="_blank" rel="noopener noreferrer"
             class="inline-flex items-center gap-1 px-3 py-1.5 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
            </svg>
            Spotify
          </a>
        </div>
      </div>

      <!-- Navigation -->
      <div class="flex justify-between items-center pt-3 border-t">
        <button id="prev-episode" class="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Previous
        </button>
        <span id="episode-counter" class="text-sm text-gray-600"></span>
        <button id="next-episode" class="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
          Next
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</dialog>

<style>
  dialog {
    max-height: 85vh;
    overflow-y: auto;
    margin: auto;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.75);
  }

  dialog[open] {
    animation: fadeIn 0.2s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translate(-50%, -50%) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
  }
</style>

<script define:vars={{ episodes }}>
  let currentEpisodeIndex = 0;
  const dialog = document.getElementById('episode-lightbox');
  const videoContainer = document.getElementById('video-container');
  const titleElement = document.getElementById('lightbox-title');
  const episodeNumberElement = document.getElementById('lightbox-episode-number');
  const guestsSection = document.getElementById('guests-section');
  const guestsList = document.getElementById('guests-list');
  const youtubeLink = document.getElementById('youtube-link');
  const appleLink = document.getElementById('apple-link');
  const spotifyLink = document.getElementById('spotify-link');
  const episodeCounter = document.getElementById('episode-counter');
  const prevButton = document.getElementById('prev-episode');
  const nextButton = document.getElementById('next-episode');
  const closeButton = document.getElementById('close-lightbox');

  function openLightbox(episodeId) {
    const index = episodes.findIndex(ep => ep.id === episodeId);
    if (index === -1) return;

    currentEpisodeIndex = index;
    updateLightboxContent();
    dialog.showModal();
  }

  function updateLightboxContent() {
    const episode = episodes[currentEpisodeIndex];

    // Update title and number
    titleElement.textContent = episode.title;
    episodeNumberElement.textContent = `Episode ${episode.number}${episode.displayDate ? ` â€¢ ${episode.displayDate}` : ''}`;

    // Update video embed (only load when opened)
    videoContainer.innerHTML = `
      <iframe
        src="https://www.youtube.com/embed/${episode.youtubeId}?rel=0"
        title="${episode.title}"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen
        class="w-full h-full"
      ></iframe>
    `;

    // Update guests section
    if (episode.isRoundup || episode.guests.length === 0) {
      guestsSection.classList.add('hidden');
    } else {
      guestsSection.classList.remove('hidden');
      guestsList.innerHTML = episode.guests.map(guest => `
        <div class="flex items-center justify-between">
          <span class="text-gray-700">${guest.name}</span>
          ${guest.social ? `
            <a href="${guest.social}" target="_blank" rel="noopener noreferrer"
               class="text-blue-600 hover:text-blue-800 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 4.557a9.83 9.83 0 0 1-2.828.775 4.932 4.932 0 0 0 2.165-2.724 9.864 9.864 0 0 1-3.127 1.195 4.916 4.916 0 0 0-3.594-1.555c-3.179 0-5.515 2.966-4.797 6.045A13.978 13.978 0 0 1 1.671 3.149a4.93 4.93 0 0 0 1.523 6.574 4.903 4.903 0 0 1-2.229-.616c-.054 2.281 1.581 4.415 3.949 4.89a4.935 4.935 0 0 1-2.224.084 4.928 4.928 0 0 0 4.6 3.419A9.9 9.9 0 0 1 0 19.54a13.94 13.94 0 0 0 7.548 2.212c9.142 0 14.307-7.721 13.995-14.646A10.025 10.025 0 0 0 24 4.557z"/>
              </svg>
              @${guest.social.split('/').pop()}
            </a>
          ` : ''}
        </div>
      `).join('');
    }

    // Update platform links
    youtubeLink.href = episode.youtubeUrl;
    appleLink.href = episode.appleUrl;
    spotifyLink.href = episode.spotifyUrl;

    // Update navigation
    episodeCounter.textContent = `${currentEpisodeIndex + 1} of ${episodes.length}`;
    prevButton.disabled = currentEpisodeIndex === 0;
    nextButton.disabled = currentEpisodeIndex === episodes.length - 1;
  }

  function closeLightbox() {
    // Clear video to stop playback
    videoContainer.innerHTML = '';
    dialog.close();
  }

  function navigateEpisode(direction) {
    if (direction === 'prev' && currentEpisodeIndex > 0) {
      currentEpisodeIndex--;
      updateLightboxContent();
    } else if (direction === 'next' && currentEpisodeIndex < episodes.length - 1) {
      currentEpisodeIndex++;
      updateLightboxContent();
    }
  }

  // Event listeners
  window.addEventListener('open-episode-lightbox', (event) => {
    openLightbox(event.detail.episodeId);
  });

  closeButton.addEventListener('click', closeLightbox);

  prevButton.addEventListener('click', () => navigateEpisode('prev'));
  nextButton.addEventListener('click', () => navigateEpisode('next'));

  // Close on backdrop click
  dialog.addEventListener('click', (event) => {
    if (event.target === dialog) {
      closeLightbox();
    }
  });

  // Keyboard navigation
  document.addEventListener('keydown', (event) => {
    if (!dialog.open) return;

    switch (event.key) {
      case 'Escape':
        closeLightbox();
        break;
      case 'ArrowLeft':
        navigateEpisode('prev');
        break;
      case 'ArrowRight':
        navigateEpisode('next');
        break;
    }
  });
</script>